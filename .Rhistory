#installing important packages
install.packages("corrplot")
# Load the dataset
kc_house_data <- read.csv("C:\\Users\\EWURA\\Downloads\\Stat 563 Project\\kc_house_data.csv")
# View the first few rows
install.packages("corrplot")
head(kc_house_data)
# Check structure and summary
str(kc_house_data)
summary(kc_house_data)
# Check for missing values
colSums(is.na(kc_house_data))
# Convert 'date' to Date type
kc_house_data$date <- as.Date(kc_house_data$date, format = "%Y%m%dT%H%M%S")
# Convert categorical-like columns to factors
kc_house_data$waterfront <- as.factor(kc_house_data$waterfront)
kc_house_data$view <- as.factor(kc_house_data$view)
kc_house_data$condition <- as.factor(kc_house_data$condition)
kc_house_data$grade <- as.factor(kc_house_data$grade)
# Boxplot for price
boxplot(kc_house_data$price, main = "Boxplot for Price", horizontal = TRUE)
# Filter out extreme values
kc_house_data <- kc_house_data %>%
filter(bedrooms <= 10, sqft_lot < quantile(sqft_lot, 0.99))
# Recheck outliers after filtering
boxplot(kc_house_data$price, main = "Boxplot for Price (After Filtering)", horizontal = TRUE)
# Correlation between sqft_lot and price
cor <- cor(kc_house_data$sqft_lot, kc_house_data$price)
cor
# Calculate IQR for price
Q1 <- quantile(kc_house_data$price, 0.25)
Q3 <- quantile(kc_house_data$price, 0.75)
IQR <- Q3 - Q1
# Define lower and upper bounds for price
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter rows within bounds
kc_house_data <- kc_house_data %>%
filter(price >= lower_bound & price <= upper_bound)
# Recheck boxplot for price
boxplot(kc_house_data$price, main = "Boxplot for Price (After Removing Outliers)", horizontal = TRUE)
# Apply log transformation to price
kc_house_data$log_price <- log(kc_house_data$price)
# Boxplot for log-transformed price
boxplot(kc_house_data$log_price, main = "Boxplot for Log-Transformed Price", horizontal = TRUE)
#Summary of the various variables
summary(kc_house_data)
# Scatterplot: Log(Price) vs Living Area
ggplot(kc_house_data, aes(x = sqft_living, y = log_price)) +
geom_point(color = "blue", alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Log(Price) vs Living Area", x = "Living Area (sqft)", y = "Log(Price)") +
theme_minimal()
# Scatterplot: Log(Price) vs Bathrooms
ggplot(kc_house_data, aes(x = bathrooms, y = log_price)) +
geom_point(color = "darkgreen", alpha = 0.5) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(title = "Log(Price) vs Bathrooms", x = "Number of Bathrooms", y = "Log(Price)") +
theme_minimal()
# Boxplot: Log(Price) by Waterfront
ggplot(kc_house_data, aes(x = waterfront, y = log_price, fill = waterfront)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16) +
labs(title = "Log(Price) by Waterfront", x = "Waterfront (0 = No, 1 = Yes)", y = "Log(Price)") +
scale_fill_manual(values = c("lightblue", "pink")) +
theme_minimal()
# Boxplot: Log(Price) by Grade
ggplot(kc_house_data, aes(x = grade, y = log_price, fill = grade)) +
geom_boxplot(outlier.color = "red", outlier.shape = 16) +
labs(title = "Log(Price) by Grade", x = "Grade", y = "Log(Price)") +
scale_fill_viridis_d() +
theme_minimal()
# Heatmap: Bedrooms vs Bathrooms and Log(Price)
ggplot(kc_house_data, aes(x = as.factor(bedrooms), y = as.factor(bathrooms), fill = log_price)) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(title = "Log(Price) by Bedrooms and Bathrooms", x = "Bedrooms", y = "Bathrooms", fill = "Log(Price)") +
theme_minimal()
# Faceted Scatterplot: Log(Price) vs Living Area by Waterfront
ggplot(kc_house_data, aes(x = sqft_living, y = log_price)) +
geom_point(alpha = 0.5, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Log(Price) vs Living Area by Waterfront", x = "Living Area (sqft)", y = "Log(Price)") +
facet_wrap(~ waterfront) +
theme_minimal()
# Correlation matrix (Multicollinearity Test)
# Increase plot dimensions using a larger graphics window
par(oma = c(0.2, 0.2, 0.2, 0.2))
cor_matrix <- cor(kc_house_data %>% select_if(is.numeric))
corrplot(cor_matrix, method = "circle")
# Check for collinearity
model <- lm(log_price ~ sqft_living + sqft_above + sqft_basement + bathrooms + bedrooms + grade,
data = kc_house_data)
alias(model)
# Drop sqft_above and sqft_basement
kc_house_data <- kc_house_data %>% select(-sqft_above, -sqft_basement)
# Fit the full model(with all the predictors)
model <- lm(log_price ~ sqft_living + bathrooms + bedrooms + grade,
data = kc_house_data)
# Calculate VIF
library(car)
vif(model)
# View summary of the model
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(corrplot)
library(car)
library(tidyr)
library(dplyr)
library(lmtest)
library(MASS)
# Function to compute metrics for each model
compute_model_metrics <- function(model, data) {
sse <- sum(residuals(model)^2)
r2 <- summary(model)$r.squared
adj_r2 <- summary(model)$adj.r.squared
aic <- AIC(model)
bic <- BIC(model)
# Calculate Cp (Mallow's Cp)
cp <- sse / (var(model$residuals) * (nrow(data) - length(coef(model)))) + 2 * length(coef(model)) - nrow(data)
return(data.frame(SSE = sse, R2 = r2, Adj_R2 = adj_r2, AIC = aic, BIC = bic, Cp = cp))
}
# Compute metrics for all models
metrics_refined <- compute_model_metrics(model_refined, refined_data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(corrplot)
library(car)
library(tidyr)
library(dplyr)
library(lmtest)
library(MASS)
#installing important packages
install.packages("corrplot")
# Load the dataset
kc_house_data <- read.csv("C:\\Users\\EWURA\\Downloads\\Stat 563 Project\\kc_house_data.csv")
# View the first few rows
head(kc_house_data)
install.packages("corrplot")
# Check structure and summary
str(kc_house_data)
summary(kc_house_data)
# Check for missing values
colSums(is.na(kc_house_data))
# Check for duplicate rows
nrow(kc_house_data) - nrow(distinct(kc_house_data))
# Convert 'date' to Date type
kc_house_data$date <- as.Date(kc_house_data$date, format = "%Y%m%dT%H%M%S")
# Convert categorical-like columns to factors
kc_house_data$waterfront <- as.factor(kc_house_data$waterfront)
kc_house_data$view <- as.factor(kc_house_data$view)
kc_house_data$condition <- as.factor(kc_house_data$condition)
kc_house_data$grade <- as.factor(kc_house_data$grade)
# Boxplot for price
boxplot(kc_house_data$price, main = "Boxplot for Price", horizontal = TRUE)
# Filter out extreme values
kc_house_data <- kc_house_data %>%
filter(bedrooms <= 10, sqft_lot < quantile(sqft_lot, 0.99))
#Extracting year and month from the date column
#Grouping yr_built into decades
kc_house_data <- kc_house_data %>%
mutate(year_sold = year(date),
month_sold = month(date),
decade_built = floor(yr_built / 10) * 10)
# Recheck outliers after filtering
boxplot(kc_house_data$price, main = "Boxplot for Price (After Filtering)", horizontal = TRUE)
# Correlation between sqft_lot and price
cor <- cor(kc_house_data$sqft_lot, kc_house_data$price)
cor
# Calculate IQR for price
Q1 <- quantile(kc_house_data$price, 0.25)
Q3 <- quantile(kc_house_data$price, 0.75)
IQR <- Q3 - Q1
# Define lower and upper bounds for price
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Filter rows within bounds
kc_house_data <- kc_house_data %>%
filter(price >= lower_bound & price <= upper_bound)
# Recheck boxplot for price
boxplot(kc_house_data$price, main = "Boxplot for Price (After Removing Outliers)", horizontal = TRUE)
summary(kc_house_data$price)
summary(kc_house_data$sqft_living)
ggplot(kc_house_data, aes(x = price)) +
geom_histogram(bins = 30, fill = "blue", color = "white") +
labs(title = "Distribution of House Prices", x = "Price", y = "Count")
ggplot(kc_house_data, aes(x = sqft_living, y = price)) +
geom_point(alpha = 0.5) +
labs(title = "Price vs. Square Footage", x = "Square Footage", y = "Price")
ggplot(kc_house_data, aes(x = as.factor(waterfront))) +
geom_bar(fill = "purple") +
labs(title = "Count of Waterfront Properties", x = "Waterfront (1 = Yes, 0 = No)", y = "Count")
ggplot(kc_house_data, aes(x = sqft_living)) +
geom_histogram(bins = 30, fill = "green", color = "white") +
labs(title = "Distribution of Living Area", x = "Living Area (sqft)", y = "Count")
ggplot(kc_house_data, aes(x = as.factor(grade))) +
geom_bar(fill = "orange") +
labs(title = "Distribution of Grades", x = "Grade", y = "Count")
kc_house_data$floors <- ceiling(kc_house_data$floors)
kc_house_data$bathrooms <- ceiling(kc_house_data$bathrooms)
kc_house_data$bedrooms<- ceiling(kc_house_data$bedrooms)
# Compute correlation matrix
cor_matrix <- cor(kc_house_data %>% select_if(is.numeric), use = "complete.obs")
# Convert correlation matrix into a tidy format using tidyr
melted_cor <- as.data.frame(as.table(cor_matrix))
# Create the heatmap with viridis colors
ggplot(data = melted_cor, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "white") +
scale_fill_viridis_c(option = "plasma", name = "Correlation", limits = c(-1, 1)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1, size = 10),
axis.text.y = element_text(size = 10),
plot.title = element_text(size = 14, face = "bold"),
legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 9)
) +
labs(title = "Correlation Heatmap", x = "", y = "")
ggplot(kc_house_data, aes(x = bathrooms, y = price)) +
geom_point(alpha = 0.5) +
labs(title = "Price vs. Bathrooms", x = "Number of Bathrooms", y = "Price")
ggplot(kc_house_data, aes(x = as.factor(waterfront), y = price, fill = as.factor(waterfront))) +
geom_boxplot(outlier.color = "red", outlier.size = 2) +  # Customize outliers
scale_fill_manual(values = c("skyblue", "orange")) +     # Add custom colors
labs(
title = "Price Distribution by Waterfront",
x = "Waterfront (1 = Yes, 0 = No)",
y = "Price",
fill = "Waterfront"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggplot(kc_house_data, aes(x = as.factor(grade), y = price, fill = as.factor(grade))) +
geom_boxplot(outlier.color = "red", outlier.size = 2) +  # Customize outliers
scale_fill_brewer(palette = "Set3") +                   # Use a predefined color palette
labs(
title = "Price Distribution by Grade",
x = "Grade",
y = "Price",
fill = "Grade"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggplot(kc_house_data, aes(x = sqft_living, y = price, color = as.factor(grade))) +
geom_point(alpha = 0.6) +
labs(title = "Price vs. Living Area by Grade", x = "Living Area (sqft)", y = "Price", color = "Grade")
ggplot(kc_house_data, aes(x = long, y = lat, color = price)) +
geom_point(alpha = 0.5) +
scale_color_viridis_c() +
labs(title = "Geographic Distribution of House Prices", x = "Longitude", y = "Latitude", color = "Price")
ggplot(kc_house_data, aes(x = as.factor(floors), y = price, fill = as.factor(floors))) +
geom_boxplot(outlier.color = "red", outlier.size = 2) +
scale_fill_brewer(palette = "Pastel1") +
labs(
title = "Price Distribution by Number of Floors",
x = "Number of Floors",
y = "Price",
fill = "Floors"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
ggplot(kc_house_data, aes(x = yr_built, y = price, color = price)) +
geom_point(alpha = 0.5) +
scale_color_viridis_c() +
labs(
title = "Price vs. Year Built",
x = "Year Built",
y = "Price",
color = "Price"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14)
)
ggplot(kc_house_data, aes(x = as.factor(condition), y = price, fill = as.factor(condition))) +
geom_boxplot(outlier.color = "red", outlier.size = 2) +
scale_fill_brewer(palette = "Dark2") +
labs(
title = "Price Distribution by Condition",
x = "Condition",
y = "Price",
fill = "Condition"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 16, face = "bold"),
axis.text = element_text(size = 12),
axis.title = element_text(size = 14),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
kc_house_data %>%
group_by(bedrooms, bathrooms) %>%
summarise(count = n()) %>%
ggplot(aes(x = as.integer(bedrooms), y = as.integer(bathrooms), fill = count)) +  # Convert to integers
geom_tile(color = "white") +
scale_fill_gradient(low = "lightblue", high = "darkblue", name = "Count") +
scale_x_continuous(breaks = scales::breaks_pretty(n = 10)) +  # Ensure only integer labels
scale_y_continuous(breaks = scales::breaks_pretty(n = 10)) +
labs(title = "Bathrooms vs. Bedrooms Heatmap", x = "Number of Bedrooms", y = "Number of Bathrooms") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Renovated vs. Non-Renovated Boxplot
kc_house_data %>%
mutate(renovated = ifelse(yr_renovated > 0, "Yes", "No")) %>%
ggplot(aes(x = renovated, y = price, fill = renovated)) +
geom_boxplot(outlier.color = "red", outlier.size = 2) +
scale_fill_manual(values = c("lightgreen", "lightcoral")) +
labs(title = "Price Distribution by Renovation Status", x = "Renovated", y = "Price", fill = "Renovated") +
theme_minimal()
# Year Built Histogram
ggplot(kc_house_data, aes(x = yr_built)) +
geom_histogram(binwidth = 5, fill = "dodgerblue", color = "white") +
labs(title = "Distribution of Year Built", x = "Year Built", y = "Count") +
theme_minimal()
# Remove 'id' and 'date'
kc_house_data <- kc_house_data[, !names(kc_house_data) %in% c("id", "date")]
# Fit the full model
full_model <- lm(price ~ ., data = kc_house_data)
# Fit the full regression model
full_model <- lm(price ~ ., data = kc_house_data)
# Summarize the model
summary(full_model)
# Remove aliased columns (sqft_above and sqft_basement)
kc_house_data <- kc_house_data[, !names(kc_house_data) %in% c("sqft_above", "sqft_basement")]
# Refit the full model
full_model <- lm(price ~ ., data = kc_house_data)
# Summarize the updated model
summary(full_model)
# Check for multicollinearity
vif(full_model)
# Remove 'decade_built' using base R
kc_house_data <- kc_house_data[, !names(kc_house_data) %in% "decade_built"]
# Fit the updated full model
full_model <- lm(price ~ ., data = kc_house_data)
# Check VIF again
vif(full_model)
plot(full_model$fitted.values, residuals(full_model),
main = "Residuals vs Fitted",
xlab = "Fitted Values",
ylab = "Residuals")
abline(h = 0, col = "red")
qqnorm(residuals(full_model), main = "Normal Q-Q Plot")
qqline(residuals(full_model), col = "red")
plot(full_model, which = 3)  # Scale-Location plot
bptest(full_model)
dwtest(full_model)
plot(full_model, which = 5)  # Residuals vs Leverage
# Perform Box-Cox transformation
boxcox_result <- boxcox(full_model, lambda = seq(-2, 2, by = 0.1))
kc_house_data$log_price <- log(kc_house_data$price)
full_model_log <- lm(log_price ~ ., data = kc_house_data)
full_model_log
# Residuals vs Fitted
plot(full_model_log, which = 1)
# Normal Q-Q Plot
plot(full_model_log, which = 2)
# Scale-Location Plot
plot(full_model_log, which = 3)
# Residuals vs Leverage Plot
plot(full_model_log, which = 5)
# Breusch-Pagan Test for Homoscedasticity
bptest(full_model_log)
# Durbin-Watson Test for Autocorrelation
dwtest(full_model_log)
# Variance Inflation Factor (VIF) for Multicollinearity
vif(full_model_log)
#Removing influential points from the data
cooks <- cooks.distance(full_model_log)  # Calculate Cook's Distance
threshold <- 4 / nrow(kc_house_data)     # Define threshold
influential_points <- which(cooks > threshold)  # Get indices of influential points
# Exclude influential points from the data
refined_data <- kc_house_data[-influential_points, ]
# Refit the model
full_model_log_cleaned <- lm(log_price ~ ., data = refined_data)
# Summary of the new model
summary(full_model_log_cleaned)
# Diagnostic Plots for the Refined Model
# Generate diagnostic plots
par(mfrow = c(2, 2)) # Set up for 2x2 grid of plots
plot(full_model_log_cleaned) # Automatically generates Residuals vs Fitted, Q-Q, Scale-Location, and Residuals vs Leverage plots
par(mfrow = c(1, 1)) # Reset plot layout
bptest(full_model_log_cleaned)
forward_model <- step(lm(log_price ~ 1, data = refined_data),
scope = ~ sqft_living + bathrooms + floors + bedrooms + grade + view + waterfront + sqft_lot + condition + yr_built + yr_renovated + lat + long + sqft_living15 + sqft_lot15 + year_sold + month_sold + zipcode, direction = "forward")
backward_model <- step(lm(log_price ~ ., data = refined_data),
direction = "backward")
both_model <- step(lm(log_price ~ 1, data = refined_data),
scope = ~ sqft_living + bathrooms + floors + bedrooms + grade + view + waterfront + sqft_lot + condition + yr_built + yr_renovated + lat + long + sqft_living15 + sqft_lot15 + year_sold + month_sold + zipcode ,
direction = "both")
# Function to compute metrics for each model
compute_model_metrics <- function(model, data) {
sse <- sum(residuals(model)^2)
r2 <- summary(model)$r.squared
adj_r2 <- summary(model)$adj.r.squared
aic <- AIC(model)
bic <- BIC(model)
# Calculate Cp (Mallow's Cp)
cp <- sse / (var(model$residuals) * (nrow(data) - length(coef(model)))) + 2 * length(coef(model)) - nrow(data)
# Calculate PRESS
press <- sum((residuals(model) / (1 - lm.influence(model)$hat))^2)
return(data.frame(SSE = sse, R2 = r2, Adj_R2 = adj_r2, AIC = aic, BIC = bic, Cp = cp))
}
# Compute metrics for all models
metrics_forward <- compute_model_metrics(forward_model, refined_data)
metrics_backward <- compute_model_metrics(backward_model, refined_data)
metrics_both <- compute_model_metrics(both_model, refined_data)
# Combine the results
results <- rbind(
cbind(Model = "Forward", metrics_forward),
cbind(Model = "Backward", metrics_backward),
cbind(Model = "Both", metrics_both)
)
# Display the table
results
# Residuals vs Fitted
plot(resid(backward_model) ~ fitted(backward_model),
main = "Residuals vs Fitted",
xlab = "Fitted Values",
ylab = "Residuals")
abline(h = 0, col = "red")
# Q-Q Plot
qqnorm(resid(backward_model), main = "Normal Q-Q Plot")
qqline(resid(backward_model), col = "red")
# Scale-Location Plot
plot(sqrt(abs(resid(backward_model))) ~ fitted(backward_model),
main = "Scale-Location",
xlab = "Fitted Values",
ylab = "Sqrt(|Residuals|)")
abline(h = 0, col = "red")
# Residuals vs Leverage
plot(backward_model, which = 5) # Cook's Distance
# Updating model to remove insignificant predictors
model_refined <- lm(log_price ~ grade + lat + sqft_living + yr_built +bedrooms+
sqft_living15 + floors + condition + view +
year_sold + bathrooms + waterfront, data = refined_data)
summary(model_refined)
# Function to compute metrics for each model
compute_model_metrics <- function(model, data) {
sse <- sum(residuals(model)^2)
r2 <- summary(model)$r.squared
adj_r2 <- summary(model)$adj.r.squared
aic <- AIC(model)
bic <- BIC(model)
# Calculate Cp (Mallow's Cp)
cp <- sse / (var(model$residuals) * (nrow(data) - length(coef(model)))) + 2 * length(coef(model)) - nrow(data)
return(data.frame(SSE = sse, R2 = r2, Adj_R2 = adj_r2, AIC = aic, BIC = bic, Cp = cp))
}
# Compute metrics for all models
metrics_refined <- compute_model_metrics(model_refined, refined_data)
# Combine the results
results <- rbind(
cbind(Model = "Refined", metrics_refined)
)
# Display the table
results
# Plot diagnostic plots for model_refined
par(mfrow = c(2, 2))  # Set up a 2x2 grid for plots
plot(model_refined)
# Additional individual diagnostic plots (if needed)
# Residuals vs. Fitted
plot(model_refined$fitted.values, resid(model_refined),
xlab = "Fitted Values", ylab = "Residuals", main = "Residuals vs Fitted")
abline(h = 0, col = "red")
# Scale-Location Plot
plot(model_refined, which = 3)  # Scale-Location
# Residuals vs. Leverage
plot(model_refined, which = 5)  # Residuals vs. Leverage
# Fit models with interaction terms
model_1 <- lm(log_price ~ . + waterfront:condition, data = refined_data)
model_2 <- lm(log_price ~ . + waterfront:grade, data = refined_data)
model_3 <- lm(log_price ~ . + bathrooms:floors, data = refined_data)
model_4 <- lm(log_price ~ . + sqft_living:condition, data = refined_data)
# Compute metrics for each model
metrics_1 <- compute_model_metrics(model_1, refined_data)
metrics_2 <- compute_model_metrics(model_2, refined_data)
metrics_3 <- compute_model_metrics(model_3, refined_data)
metrics_4 <- compute_model_metrics(model_4, refined_data)
# Combine metrics into a table
interaction_results <- rbind(
cbind(Model = "Waterfront:Condition", metrics_1),
cbind(Model = "Waterfront:Grade", metrics_2),
cbind(Model = "Bathrooms:Floors", metrics_3),
cbind(Model = "Sqft Living:Condition", metrics_4)
)
# Display the table
interaction_results
# Graphical diagnostics
par(mfrow = c(2, 2))  # Layout for 4 plots
plot(model_4 )  # Produces Residuals vs Fitted, Q-Q Plot, Scale-Location, and Residuals vs Leverage
